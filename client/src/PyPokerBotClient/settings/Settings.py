# coding=utf-8
"""
Settings class is a interface to the settings.py dictionary that contains the general
configuration and parameters for the PokerBot, it is meant to be used as a singleton
as there is a need for all components of the bot to share the same parameters.
"""
from PyPokerBotClient.settings.default_settings import settings as default_setting


class Settings:
    """
    Settings class is a interface to the settings.py dictionary that contains the general
    configuration and parameters for the PokerBot, it is meant to be used as a singleton
    as there is a need for all components of the bot to share the same parameters.
    """

    def __init__(self):
        pass

    def get_log_format(self):
        """
        Returns the log format to be used by the PokerBot, it uses the format specified
        on the standard logging module of python.

        :return: String containg a valid format according to standard logging module
        """
        return default_setting['LOG_FORMAT']

    def get_log_level(self):
        """
        Returns the log level to be used by the PokerBot, it uses the levels specified
        on the standard logging module of python.

        :return: String containg a valid level according to standard logging module
        """
        return default_setting['LOG_LEVEL']

    def get_log_location(self):
        """
        Returns the log location where the PokerBot will write its logs, it can be
        either a relative or absolute path.

        :return: String containg a valid path (either relative or absolute)
        """
        return default_setting['LOG_LOCATION']

    def get_table_scanner_class(self, image_platform):
        """
        The PokerBot class to be used as scanner to a certain poker platform (PokerStars,
        888Poker or others). Each poker platform has its own caracteristics and requires
        a different code approach

        :param image_platform: A string containing the poker platform to use.
        :return: A string containing the relevant python class
        """
        return default_setting['PLATFORMS'][image_platform]['POKER_TABLE_SCANNER_CLASS']

    def get_table_strategy_class(self, image_platform):
        """
        The PokerBot class to be used to generate decisions when playing in automatic mode.
        The Strategy class takes the dictionary generated by the table analysed class and
        then generate the correct decision to be made.

        :param image_platform: A string containing the poker platform to use.
        :return: A string containing the relevant python class
        """
        return default_setting['PLATFORMS'][image_platform]['POKER_STRATEGY_CLASS']

    def get_number_of_seats(self, image_platform, image_tabletype):
        """
        Returns the number of seats available on the current poker client table to be
        played and/or analysed

        :param image_platform: A string containing the poker platform to use.
        :param image_tabletype: A string containing the poker table type to use.
        :return: A integer with the number of seats.
        """
        return default_setting['PLATFORMS'][image_platform]['TABLE_SCANNER'][image_tabletype]['NUMBER_OF_SEATS']

    def get_calculate_url(self):
        """
        The PokerBot uses a server to calculate hand equity (the probrabilty) that
        a certain hand will be the winning hand. This server exposes a rest api with
        a URL, and this parameter specifies the URL to be used.

        :return: A string containing the URL
        """
        return default_setting['STRATEGIES']['SIMPLE']['CALCULATE_URL']

    def get_player_hasnocard_template(self, platform, index):
        """
        The PokerBot uses a series of templates for each platform to determine if a
        certain card is in a certain position, or if there are no cards at all. This
        function returns the path to such image. The PokerBot uses the template to
        compare the current image with such template to measure similarity.

        :param platform: A string containing the poker platform to use.
        :param index: The index of the seat to be returned
        :return: A string containing the path to the sample image
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][
                   'TEMPLATES_FOLDER'] + '\\' + 'PLAYER{}_HASNOCARD'.format(index + 1) + '.jpg'

    def get_button_template_file(selfself, platform, table, index):
        """
        The PokerBot uses a series of templates for each platform to determine if a
        certain button is in a certain position, or if there are no buttons. This
        function returns the path to such image. The PokerBot uses the template to
        compare the current image with such template to measure similarity.

        :param platform: A string containing the poker platform to use.
        :param table: A string containing the poker table type to use.
        :param index: The index of the seat to be returned
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER']['TEMPLATES_FOLDER'] + \
               '\\' + 'BUTTON{}_TEMPLATE'.format(index + 1) + '.jpg'

    def get_button_template(self, platform, tabletype, index):
        """
        The PokerBot uses a series of templates for each platform to determine if a
        certain button is in a certain position, or if there are no buttons. This
        function returns the path to such image. The PokerBot uses the template to
        compare the current image with such template to measure similarity.

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param index: The index of the seat to be returned
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype][
            'BUTTON{}'.format(index + 1)]

    def get_card_template(self, platform, current_card, current_suit):
        """
        The PokerBot uses a series of templates for each platform to verify
        which card is on each position, there is a template for each card in
        each suit, and the bot compares such template to the image on the screen
        in order to determine the best match for the card on the screen

        :param platform: A string containing the poker platform to use.
        :param current_card: A string containing the card value (2-9,T,J,Q,K,A)
        :param current_suit: The index of the seat to be returned (h,c,s,d)
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][
                   'TEMPLATES_FOLDER'] + '\\' + current_card + current_suit + '.jpg'

    def get_nobet_template(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if there are
        no bets on the table.

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['NOBET_TEMPLATE']

    def get_flopcard(self, platform, tabletype, index):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if is a certain
        card on the flop position

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param index: The index of the card on the table`s flop
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype][
            'FLOPCARD{}'.format(index + 1)]

    def get_flopcard_size(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this function returns the size of the flop card on the table

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['FLOPCARD_SIZE']

    def get_flop_card_key(self, platform, tabletype, flop_card_key):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if is a certain
        card on the flop key

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param key: The key of the card on the table`s flop
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype][flop_card_key]

    def get_command_current_pos_key(self, platform, tabletype, current_pos_key):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if is a certain
        command on a certain position

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param current_pos_key: The key of the command on the table`s flop
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype][current_pos_key]

    def get_command_test_tolerance(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, as this template is actually a comparison between the image on
        the poker client and the template, there is a need for a certain accuracy
        threshold when comparing the images. This function returns a value for such
        tolerance level.

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A integer returning the tolerance level
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['COMMAND_TEST_TOLERANCE']

    def get_command_test_template(self, platform, tabletype, current_command):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if is a certain
        command on a certain position

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param current_command: The index of the command to be tested.
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype][
            'COMMAND_TEST_TEMPLATE{}'.format(current_command)]

    def get_command_test_size(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if is a certain
        command on a certain position

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A tuple containing the size of the command button
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['COMMAND_TEST_SIZE']

    def get_command_size(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if is a certain
        command on a certain position

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A tuple containing the size of the command button
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['COMMAND_SIZE']

    def get_button(self, platform, tabletype, index):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if the button is
        in a certain position on the table.

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param index: The index of the position in the table
        :return: A tuple containing the size of the command button template
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype][
                   'BUTTON{}'.format(index + 1)],

    def get_button_threshold(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if the button is
        in a certain position on the table, this function returns the acceptance
        similarity threshold between the table image and the template to be accepted
        as the correct position of the button in the table

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param index: The index of the position in the table
        :return: A integer containing the threshold
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['BUTTON_THRESHOLD']

    def get_button_size(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if the button is
        in a certain position on the table, this function returns the size of the template
        to be used for comparison

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param index: The index of the position in the table
        :return: A tuple containing the size of the button template
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['BUTTON_SIZE']

    def get_player_has_unknown_card_template(self, platform):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if a certain position on
        a table seat has unknown cards.

        :param platform: A string containing the poker platform to use.
        :return: A path containing the template path
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER']['PLAYERCARD_HAS_UNKNOWN_CARD_TEMPLATE']

    def get_comand_pos(self, platform, tabletype, current_command):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if a certain position on
        a table seat has unknown cards.

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param current_command: The index of the position of the button in the table
        :return: A path containing the template path
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype][
            'COMMAND_POS{}'.format(current_command)]

    def get_flop_has_nocard_template(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if a certain position on
        the table flop has a card

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A path containing the template path
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype][
            'FLOPCARD_HAS_NOCARD_TEMPLATE']

    def get_play_hascard_threshold(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if a certain position on
        the table flop has a card

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A path containing the template path
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['PLAY_HASCARD_THRESHOLD']

    def get_player_hascard(self, platform, tabletype, index):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if a certain position on
        the table seat has a card...

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param index: The index of the position in the table
        :return: A path containing the template path
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['PLAYER{}_HASCARD'.format(index + 1)]

    def get_bet_size(self, platform, tabletype):
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['BET_SIZE']

    def get_bet(self, platform, tabletype, index):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if a certain position on
        a table seat has a bet

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param index: The index of the position in the table
        :return: A path containing the template path
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['BET{}'.format(index + 1)]

    def get_playerhascard_size(self, platform, tabletype):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if a certain position on
        the table seat has a card... This function returns the size of such template

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A tuple containing the size of the template
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['PLAYERHASCARD_SIZE']

    def get_pot_pos(self, platform, tabletype):
        """
        This function returns the position of the 'Raise to Pot' button in order
        to set the bet to the pot value

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :return: A tuple containing the size of the template
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['SET_RAISE_TO_POT']

    def get_command_pos(self, platform, tabletype, pos):
        """
        The Pokerbot uses a series of templates in order to analyse the image on
        poker client, this template is the one used to determine if is a certain
        command on a certain position

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param pos: The pos of the command on the table`s flop
        :return: A string containing the path to the sample image.
        """
        return default_setting['PLATFORMS'][platform]['TABLE_SCANNER'][tabletype]['COMMAND_POS{}'.format(pos)]

    def get_sample_folder(self):
        """
        This function returns the folder where the samples being generated will be saved.

        :return: None
        """
        return default_setting['SAMPLES_FOLDER']

    def get_time_between_sleeps(self):
        """
        This function returns the sleep time between the every screen capture for the:
        hud, play and grab_image tasks

        :return: None
        """
        return int(default_setting['SLEEP_TIME_BETWEEN_CAPTURE_MS'])

    def get_platforms(self):
        """
        This function returns the available poker platforms for the PokerBot

        :return: List of strings containing the available platforms
        """
        return [default_setting['PLATFORMS'][x] for x in default_setting['PLATFORMS']]

    def get_raw_image_pos(self,image_platform,image_tabletype,image_pos):
        """
        This function returns the positicn for a certain image component of a screenshot
        made by the grab_image task

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param image_pos: The component of the image being returned
        :return: A tuple containing the position of the image component

        """
        return default_setting['PLATFORMS'][image_platform]['TABLE_SCANNER'][image_tabletype][image_pos]

    def get_raw_image_size(self,image_platform,image_tabletype,image_size):
        """
        This function returns the size for a certain image component of a screenshot
        made by the grab_image task

        :param platform: A string containing the poker platform to use.
        :param tabletype: A string containing the poker table type to use.
        :param image_pos: The component of the image being returned
        :return: A tuple containing the size of the image component

        """
        return default_setting['PLATFORMS'][image_platform]['TABLE_SCANNER'][image_tabletype][image_size]
